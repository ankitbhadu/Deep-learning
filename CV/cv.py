# -*- coding: utf-8 -*-
"""CELLSCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uns-hqS8JEqHrcAmxs0H23j32wCMPUWm
"""



from fastai import *
from fastai.vision import *
import matplotlib.pyplot as plt

#dataset was stored in github repo
! git clone https://github.com/ankitbhadu/deep-learning.git

cd /content/deep-learning/

!rm -rf README.md

cd /content/deep-learning/CV

path = Path('/content/deep-learning/CV/Data')

fnames = get_image_files(path)

fnames[:5]


np.random.seed(2)
pat= r'/([^/])\s\S+.png$'

#getting data ready to be fed into model
data = ImageDataBunch.from_name_func(path, fnames, label_func = lambda x: 'safe' if '/uninfected ' in str(x) else 'harm', ds_tfms=get_transforms(), size=224)
data.normalize(imagenet_stats)

data.show_batch(rows=3, figsize=(7,6))

#using pretrained imagenet model
learn = cnn_learner(data,models.resnet50,metrics=error_rate)

learn.lr_find()
learn.recorder.plot()

#fine tuning
learn.fit_one_cycle(8,max_lr=slice(1e-5,1e-2))

interp = ClassificationInterpretation.from_learner(learn)

interp.plot_top_losses(15,figsize=(15,10))

learn.save('stage-1')

learn.unfreeze()
learn.fit_one_cycle(8,max_lr=slice(1e-5,1e-2))

learn.save('stage-2')

learn.lr_find()

learn.recorder.plot()

learn.load('stage-2')

learn.fit_one_cycle(6,max_lr=1e-4)

learn.lr_find

learn.recorder.plot()

learn.save('stage-3')

learn.fit_one_cycle(2,max_lr=2e-7)

interp = ClassificationInterpretation.from_learner(learn)

learn.save('stage-3')

learn.load('stage-3')

#creates the export.pkl which can then be readily used for loading learner
learn.export()

#using pandas dataframe network for easy handling
testdf=pd.read_csv('/content/deep-learning/CV/submission.csv')

testdf1.head()

y=testdf1.to_csv(index=False)

test = ImageList.from_df(testdf1,"",folder='test')

test

data.add_test(test)

learn = load_learner('/content/deep-learning/CV/Data/','export.pkl', test=test)
preds, _ = learn.get_preds(ds_type=DatasetType.Test)

preds[:5]

labelled_preds = torch.argmax(preds,1)

labelled_preds

fnames = [f for f in testdf1['image']]

fnames[:5]

df = pd.DataFrame({'image':fnames, 'category':labelled_preds}, columns=['image', 'category'])

#result exported in required csv file
df.to_csv('submission.csv', index=True)